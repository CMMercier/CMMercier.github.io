[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"~Coming Soon~ ","date":"September 21, 2021","hero":"/posts/owasp-webgoat/hero.jpg","permalink":"/posts/owasp-webgoat/","summary":"~Coming Soon~ ","tags":null,"title":"OWASP WebGoat Challenge"},{"categories":null,"contents":"Setup For this I visited https://elements.heroku.com/buttons/bkimminich/juice-shop and looked through the many options to get my own personal instance of Juice Shop setup. The first option, Deploy on Heroku for free, caught my eye. For this I simply had to:\n Sign up to Heroku and log in. Click the provided deploy button.  This really is the fastest and simplest way to get setup, and its free!\nAfter I clicked deploy I had to give the app a name and wait for it to build. Really the longest part of this was waiting for it to build. Now that the Juice Shop app is up and running its time to get hacking!\nNote: Hacking progress is restored on server resets but deleting your cookies will destroy your progress!\n1 * Challenges Scoreboard Category: Miscellaneous\nFirst to find access to the scoreboard. I remembered it existed but not where and forgot that it was actually a part of the challenges so I took to google and did a quick search for its location.\nhttps://exampleapp.herokuapp.com/#/score-board\nFirst challenge complete: Score Board (Find the carefully hidden \u0026lsquo;Score Board\u0026rsquo; page.)\nBonus Payload Category: XSS\nThis challenge is as simple as adding the provided payload to the search function.\n\u0026lt;iframe width=\u0026quot;100%\u0026quot; height=\u0026quot;166\u0026quot; scrolling=\u0026quot;no\u0026quot; frameborder=\u0026quot;no\u0026quot; allow=\u0026quot;autoplay\u0026quot; src=\u0026quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076\u0026amp;color=%23ff5500\u0026amp;auto_play=true\u0026amp;hide_related=false\u0026amp;show _comments=true\u0026amp;show_user=true\u0026amp;show_reposts=false\u0026amp;show_teaser=true\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\nBully Chatbot Category: Miscellaneous\nTo access the Chatbot I created a new account on the site then opened up the menu and selected the support chat. I really just had to send any message containing the words \u0026ldquo;coupon code\u0026rdquo; enough times for it to give up and hand over a code.\nConfidential Document Category: Sensitive Data Exposure\nThe hints:\n Somewhere in the application you can find a file that contains sensitive information about some - potentially hostile - takeovers the Juice Shop top management has planned.\n  -Analyze and tamper with links in the application that deliver a file directly.\n  -The file you are looking for is not protected in any way. Once you found it you can also access it.\n In the About Us section I found a link \u0026ldquo;Check out our boring terms of use if you are interested in such lame stuff.\u0026rdquo; that opened up a download window to get a legal.md document. I opened up burp suite and intercepted this request there and noticed the GET request was to a ftp server.\nSo I checked to see if something simple like https://exampleapp.herokuapp.com/ftp would work and it did!\nDOM XSS Category: XSS\n Perform a DOM XSS attack with \u0026lt;iframe src=\u0026quot;javascript:alert(xss)\u0026quot;\u0026gt;.\n This is another task where I was able to simply just copy the script provided and paste it into the search function to complete this challenge.\n\u0026lt;iframe src=\u0026quot;javascript:alert(xss)\u0026quot;\u0026gt;\nError Handling Category: Security Misconfiguration\n Provoke an error that is neither very gracefully nor consistently handled.\n This one has so many ways to trigger it that I ended up completing it and didn\u0026rsquo;t even notice.\nExposed Metrics Category: Sensitive Data Exposure\n Find the endpoint that serves usage data to be scraped by a popular monitoring system.\n The hints pretty much give this one away. A quick read through and the name of this challenge made it obvious that the path I was looking for was /metrics/.\n Guessing the path is probably just as quick as taking the RTFM route via https://prometheus.io/docs/introduction/first_steps\n Missing Encoding Category: Improper Input Validation\n Retrieve the photo of Bjoern\u0026rsquo;s cat in \u0026ldquo;melee combat-mode\u0026rdquo;.\n Luckily this was as easy as url encoding the #\u0026rsquo;s to %23 because that emoji really had me scratching my head for a bit there.\nhttps://www.eso.org/~ndelmott/url_encode.html\nOutdated Allowlist Category: Unvalidated Redirects\nFor the reading: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n Let us redirect you to one of our crypto currency addresses which are not promoted any longer.\n For this one I inspected the page to open the debugger window so that I could have a look around the Javascript files to try to find the crypto currency address. The first place I checked was main-es2018.js and I simply did a search for redirect which had 20 results to check through but the answer was there and I simply had to paste this blockchain.info link to the app address.\nhttps://exampleapp.herokuapp.com/redirect?to=https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm\nPrivacy Policy Category: Miscellaneous\n Read our privacy policy.\n This simply required me to be logged in and go to Account \u0026gt; Privacy \u0026amp; Security \u0026gt; Privacy Policy.\nRepetitive Registration Category: Improper Input Validation\n Follow the DRY principle while registering a user.\n    The DRY (Don\u0026rsquo;t Repeat Yourself) Principle states:\n  Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n This challenge required me to turn on burp and foxyproxy to catch a legit registration attempt and change the value of passwordRepeat then forward the request.\nZero Stars Category: Improper Input Validation\n Give a devastating zero-star feedback to the store.\n Reading: https://cwe.mitre.org/data/definitions/20.html\nI found the customer feedback option as the first option on the menu. This page allows us to give a feedback of 1 to 5. Getting around this is as simple as intercepting the request in burp and changing the rating to 0.\n2 * Challenges Admin Section Category: Broken Access Control\n Access the administration section of the store.\n The quick and easy first check was to try to guess the admin page location. I tried https://exampleapp.herokuapp.com/#/admin but no luck there so I tried administration instead and got a 403 You are not allowed to access this page!. Also turns out you can find this path from the main.js as well if guessing failed.\nI have found the page but I still need to login as the administrator to complete this challege. Going to the login page I see that we need the administrators email not username to login. So I go back and look through the shop looking for the complete email address somewhere or at least an @email to just have to guess the name.\nOn the review for the product Apple Juice contains a review from the admin themselves!\nadmin@juice-sh.op\nThe category for this challenge is injection but there\u0026rsquo;s another challenge to log in without using injection so its time to brute force the login page instead and complete both challenges in one go. I first attempted this with hydra but soon discovered that hydra is does not work because this is a client-side AngularJS route. So its time to try with burp! I captured the request and sent it over to intruder. I set the position to the password and on payload options I loaded a smaller file from seclist called best1050.txt as I only have the free version of burp and it doesn\u0026rsquo;t load rockyou. Running this attack on the free version is a bit slow but it works and I get the password.\nNow to just login with the credentials admin@juice-sh.op:admin123 and head over to the previously found /#/administration page to complete this challenge.\nDeprecated Interface Category: Security Misconfiguration\n Use a deprecated B2B interface that was not properly shut down.\n For this I had to do some googling to understand what B2B integration was about and came across this explanation \u0026ldquo;It allows them to work and trade more effectively with their customers, suppliers and business partners by automating key business processes.\u0026rdquo; from www.ibm.com. So I headed over to the complaint page on the menu and took a look at what file types were accepted which turned out to be .pdf and .zip files. Inspecting this and heading back to debugger to take a look at the main-es2018.js and doing a search for zip revealed that .xml was also accepted.\nI didn\u0026rsquo;t have any random .xml files around so I used touch test.xml to create one and then selected browse on the site and chose all file types so that I could select this file and upload it.\nFive-Star Feedback Category: Broken Access Control\n Get rid of all 5-star customer feedback.\n Sounds like an admin task, so I headed back to the administration page to take a look and sure enough the customer feedback section was there with only one 5-star feedback. All I had to do was hit delete on this one and the challenge completed.\nLogin Admin Category: Injection\n Log in with the administrator\u0026rsquo;s user account.\n See Admin Section challenge solve.\nAnother method is with injection like the category suggests. Log in with Email ' or 1=1-- and any Password which will authenticate the first entry in the Users table which usually happens to be the administrator.\nLogin MC SafeSearch Category: Sensitive Data Exposure\n Log in with MC SafeSearch\u0026rsquo;s original user credentials without applying SQL Injection or any other bypass.\n The hints for this supply a link to a video by MC SafeSearch at https://www.youtube.com/watch?v=v59CX2DiX0Y called \u0026ldquo;Protect Ya' Passwordz\u0026rdquo;. Watch this video to learn that MC used the name of his dog \u0026ldquo;Mr. Noodles\u0026rdquo; as a password but changed \u0026ldquo;some vowels into zeroes\u0026rdquo;.\nAll I had to do was log in with email mc.safesearch@juice-sh.op, as we already know what email addresses look like for this site and could easily guess the name, and password Mr. N00dles to solve this challenge.\nMeta Geo Stalking Category: Sensitive Data Exposure\n Determine the answer to John\u0026rsquo;s security question by looking at an upload of him to the Photo Wall and use it to reset his password via the Forgot Password mechanism.\n The title hints toward geo data so I headed over to the photo wall and downloaded the picture by jOhNny. I then ran exiftool to get the GPS coordinates.\nAnd then did a google search of these coordinates to find a name that could be the security question.\nIt took quite a few attempts but I eventually found it to be Daniel Boone National Forest and was able to login by going to \u0026ldquo;forgot your password?\u0026rdquo; and using john@juice-sh.op for the email, Daniel Boone National Forest for the security question, and resetting the password.\nPassword Strength Category: Broken Authentication\n Log in with the administrator\u0026rsquo;s user credentials without previously changing them or applying SQL Injection.\n See Admin Section challenge solve.\nSecurity Policy Category: Miscellaneous\n Behave like any \u0026ldquo;white-hat\u0026rdquo; should before getting into the action.\n For this I attempted to run gobuster and dirbuster against the site to no success. So I loaded up OWASP\u0026rsquo;s very own ZAP and was able to find a file at https://exampleapp.herokuapp.com/.well-known/security.txt. I went to that address and the challenge completed but out of curiosity I looked up what this file was about anyway and heres the link for reference: https://securitytxt.org/.\nView Basket Category: Broken Access Control\n View another user\u0026rsquo;s shopping basket.\n I headed over to the main page and added an item to the basket then selected the basket. On the basket page I inspected the page and went to the session storage where I found the item total and bid. Bid must hold the user id value so I changed the 1 to 2 and reloaded the page to complete the challenge.\nVisual Geo Stalking Category: Sensitive Data Exposure\n Determine the answer to Emma\u0026rsquo;s security question by looking at an upload of her to the Photo Wall and use it to reset her password via the Forgot Password mechanism.\n At first I attempted a reverse image search on google but saw quickly that that was not the way to go with this. Looking closer at the image itself I noticed the ITsec logo in a window on the left side.\nUsing this (case sensitive) as the security question I was able to reset her password and complete the challenge.\nWeird Crypto Category: Cryptographic Issues\n Inform the shop about an algorithm or library it should definitely not use the way it does.\n When completing the Meta Geo Stalking challenge I got a password hash back in the response from the burp request. Using hash-identifier I found out that this has is only an unsalted MD5. Taking this hash to crackstation.net easily got me the password of john@juice-sh.op as test1234.\nThe challenge says to inform the shop about the algorithm so to complete this challenge I had to go to Customer Feedback on the menu and simply leave a comment that said MD5 and solve the captcha to submit.\nReflected XSS Unavailable on the Heroku environment.\n3 * Challenges API-only XSS Unavailable on the Heroku environment.\nAdmin Registration Category: Improper Input Validation\n Register as a user with administrator privileges.\n For this challenge all I had to do was submit a POST request to the API like so:\ncurl -d '{\u0026quot;email\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;role\u0026quot;:\u0026quot;admin\u0026quot;}' -H 'Content-Type: application/json' https://exampleapp.herokuapp.com/api/users/\n{\u0026quot;status\u0026quot;:\u0026quot;success\u0026quot;,\u0026quot;data\u0026quot;:{\u0026quot;username\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;deluxeToken\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;lastLoginIp\u0026quot;:\u0026quot;0.0.0.0\u0026quot;,\u0026quot;profileImage\u0026quot;:\u0026quot;/assets/public/images/uploads/defaultAdmin.png\u0026quot;,\u0026quot;isActive\u0026quot;:true,\u0026quot;id\u0026quot;:21,\u0026quot;email\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;role\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;updatedAt\u0026quot;:\u0026quot;2021-09-24T13:43:00.474Z\u0026quot;,\u0026quot;createdAt\u0026quot;:\u0026quot;2021-09-24T13:43:00.474Z\u0026quot;,\u0026quot;deletedAt\u0026quot;:null}} Bjoern\u0026rsquo;s Favorite Pet Category: Broken Authentication\n Reset the password of Bjoern\u0026rsquo;s OWASP account via the Forgot Password mechanism with the original answer to his security question.\n The hint for this suggests looking up Bjorn. I quickly found he has a youtube channel that looks interesting and the information I need is likely there given the that the playlist is called \u0026ldquo;OWASP Juice Shop\u0026rdquo;, https://www.youtube.com/playlist?list=PLV9O4rIovHhO1y8_78GZfMbH6oznyx2g2. But there are 110 videos here! I started at the bottom of the list as this is likely to be an early recording and going through the titles to check for ones that stand out or seem like they might hold the key I eventually came across https://www.youtube.com/watch?v=Lu0-kDdtVf4 (81 on the list).\nThis is the introduction video to Juice Shop. Around 4 mins into the video he creates an account bjoern@owasp.org and chooses Name of your favorite pet? as his security question with the answer being Zaya.\nWith this information I headed to the login page and chose \u0026ldquo;Forgot your password?\u0026rdquo; and tested the information from the video. Sure enough this account still existed using this information.\nCAPTCHA Bypass Category: Broken Anti Automation\n Submit 10 or more customer feedbacks within 10 seconds.\n I already ran into the CAPTCHA section early on in the Customer Feedback section so I immediately head there. Next I inspect the page and go to the network tab to check for the CAPTCHA request and found https://example.herokuapp.com/rest/captcha/.\ncaptchaId\t2 captcha\t\u0026quot;6*1+8\u0026quot; answer\t\u0026quot;14\u0026quot; When I submit feedback I see a POST call to /api/Feedback with the information:\ncaptcha\t\u0026quot;14\u0026quot; captchaId\t2 comment\t\u0026quot;test (***in@juice-sh.op)\u0026quot; rating\t1 UserId\t1 So I open up Burp and capture a request to the /api/Feedback and send it to repeat to simply spam send and complete this challenge.\nCSRF Category: Broken Access Control\n Change the name of a user by performing Cross-Site Request Forgery from another origin.\n For this challenge I used Real-Time HTML Editor at http://htmledit.squarefree.com/ and ran the following code:\n\u0026lt;form action=\u0026quot;https://exampleapp.herokuapp.com/profile\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;input name=\u0026quot;username\u0026quot; value=\u0026quot;CSRF\u0026quot;/\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt;document.forms[0].submit();\u0026lt;/script\u0026gt; The challenge completed without the successful message I usually get but I could also verify its success by going to https://exampleapp.herokuapp.com/profile and seeing that the username and indeed been changed to CSRF.\nClient-side XSS Protection Unavailable on the Heroku environment.\nDatabase Schema Category: Injection\n Exfiltrate the entire DB schema definition via SQL Injection.\n From an earlier challenge (DOM XSS) I knew that there was no input sanitization on the “Search” field, so I decided to start there. Running sqlmap -u https://exampleapp.herokuapp.com/rest/products/search?q= \u0026ndash;dbs \u0026ndash;level=3 \u0026ndash;risk=3 quickly tells us this is an SQLite database we are dealing with.\nsqlmap identified the following injection point(s) with a total of 1383 HTTP(s) requests: --- Parameter: q (GET) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: q=') AND 6959=6959 AND ('KGhU' LIKE 'KGhU --- [19:46:31] [INFO] testing SQLite [19:46:31] [INFO] confirming SQLite [19:46:32] [INFO] actively fingerprinting SQLite [19:46:32] [INFO] the back-end DBMS is SQLite back-end DBMS: SQLite [19:46:32] [WARNING] on SQLite it is not possible to enumerate databases (use only '--tables') Cool its vulnerable. I was able to rerun sqlmap with --tables and retrieve the database SQLite_masterdb as well as all the table but the challenge did not complete. Nonetheless I made a copy of the results and saved it some place ill remember in case its useful later on. Doing this the manual way really took some time as at first I thought we had to enumerate all 20 tables that sqlmap found but apparently it was just 9.\nhttps://exampleapp.herokuapp.com/rest/products/search?q=qwert')) UNION SELECT sql, '2', '3', '4', '5', '6', '7', '8', '9' FROM sqlite_master--\nDeluxe Fraud Category: Improper Input Validation\n Obtain a Deluxe Membership without paying for it.\n I headed to https://exampleapp.herokuapp.com/#/payment/deluxe and started up Burp to see if I could get an easy win intercepting a request but didn\u0026rsquo;t find anything useful there. So I inspected the pay using wallet button and removed both codes that mentioned disabled (mat-button-disabled and disabled=\u0026quot;true\u0026quot;). After that I clicked the now enabled button and continue then checked the network tab of devtools. There is a POST request sent, which only contains one parameter in the request payload, \u0026ldquo;paymentMode\u0026rdquo;, which is set to \u0026ldquo;wallet\u0026rdquo;. I right clicked the POST request itself on the network tab list and selected to edit and resent. I changed the \u0026quot;wallet\u0026quot; value to just \u0026quot;\u0026quot; and send.\nForged Feedback Category: Broken Access Control\n Post some feedback in another users name.\n I completing this one accidentally while doing the CAPTCHA bypass challenge simply by being logged in as one of the users accounts that I had gained access to earlier on.\nThe proper way to do this is to inspect the page and find the hidden element under feedback-form.\n\u0026lt;input id=\u0026quot;userId\u0026quot; class=\u0026quot;ng-untouched ng-pristine ng-valid\u0026quot; hidden=\u0026quot;\u0026quot;\u0026gt;\nRemove the hidden and you can change the userId to complete this challenge.\nForged Review Category: Broken Access Control\n Post a product review as another user or edit any user\u0026rsquo;s existing review.\n For this one I selected an item and created a review that simply said test. As I was not logged in the user for this review was logged as Anonymous. Inspecting the page and checking the Network tab I found the POST request that was sent. I right clicked this request and selected to edit and resent and changed the request body to {\u0026quot;message\u0026quot;:\u0026quot;test\u0026quot;,\u0026quot;author\u0026quot;:\u0026quot;admin@juice-sh.op\u0026quot;} and hit send.\nThis actually didn\u0026rsquo;t work so I created an account and logged in then repeated the process and successfully completed it this time.\nGDPR Data Erasure Category: Broken Authentication\n Log in with Chris' erased user account.\n For this challenge I tried using \\' or deletedAt IS NOT NULL-- as the username with any password knowing that this small application built specifically for testing was likely to have Chris' account as the only deleted account and sure enough this worked and completed the challenge.\nAs this was not the way they likely wanted me to complete this challenge I went back to the SQL injection method to find the proper email address for Chris. By using qwert')) UNION SELECT id, email, password, '4', '5', '6', '7', '8', '9' FROM Users-- at /rest/products/search I successfully get the email chris.pike@juice-sh.op.\nFull address: https://exampleapp.herokuapp.com/rest/products/search?q=qwert%27))%20UNION%20SELECT%20id,%20email,%20password,%20%274%27,%20%275%27,%20%276%27,%20%277%27,%20%278%27,%20%279%27%20FROM%20Users--\nWith that I just need to login with the email as chris.pike@juice-sh.op'-- and any password.\nLogin Amy Category: Sensitive Data Exposure\n Log in with Amy\u0026rsquo;s original user credentials. (This could take 93.83 billion trillion trillion centuries to brute force, but luckily she did not read the \u0026ldquo;One Important Final Note\u0026rdquo;)\n Googling either hints: \u0026ldquo;This could take 93.83 billion trillion trillion centuries\u0026rdquo; or \u0026ldquo;One Important Final Note\u0026rdquo; comes up with a link related to password haystacks, https://www.grc.com/haystack.htm?id.\nThis site gives two password examples and asks which we think is the more difficult to crack. The answer being D0g...................... As the more hints section tells us this Amy is meant to be the Futurama Amy whose husband is named Kif, simply attempting amy@juice-sh.op and replacing the strong password with her husbands name K1f..................... succeeds in logging in and completing this challenge.\nLogin Bender Category: Injection\n Log in with Bender\u0026rsquo;s user account.\n As the category for this is injection I attempted to login as bender@juice-sh.op'-- with any password and it worked. Or alternatively decode the MD5 passwords we found from the SQL Injection vulnerability found at /rest/products/search\nLogin Jim Category: injection\n Log in with Jim\u0026rsquo;s user account.\n The same injection method used on Bender\u0026rsquo;s account works on Jim. Simply change the login email to jim@juice-sh.op'-- and again use anything for the password. Or alternatively decode the MD5 passwords we found from the SQL Injection vulnerability found at /rest/products/search\nManipulate Basket Category: Broken Access Control\n Put an additional product into another user\u0026rsquo;s shopping basket.\n For this one I had to be logged in as any user and inspect the network traffic while adding an item to the cart. I selected to edit and resend the POST request to /api/BasketItems. Attempting to edit the BasketId and send got me an unauthorized 401 response.\nAdding another BasketId to also add the item to another users account however did succeed. {\u0026quot;ProductId\u0026quot;:24,\u0026quot;BasketId\u0026quot;:\u0026quot;2\u0026quot;,\u0026quot;quantity\u0026quot;:1,\u0026quot;BasketId\u0026quot;:\u0026quot;3\u0026quot;}\nPayback Time Category: Improper Input Validation\n Place an order that makes you rich.\n To complete this one I simply had Burp Suite on while I accessed the basket and noticed when I changed the quantity Burp made a PUT request to /api/BasketItems/13 with \u0026quot;quantity\u0026quot;:2. I simply changed this to a negative number on Burp before forwarding the request to get \u0026ldquo;rich\u0026rdquo;.\nPrivacy Policy Inspection Category: Security through Obscurity\n Prove that you actually read our privacy policy.\n Going to Account \u0026gt; Privacy and Security \u0026gt; Privacy Policy didn\u0026rsquo;t immediately complete this task so I started having a look around and noticed some areas highlight. So I inspected one of these areas to find a class=\u0026quot;hot\u0026quot;. There seems to be a code hidden here that starts with the site address, We may also, instruct you, to refuse all, reasonably necessary and responsibility.\nhttps://exampleapp.herokuapp.com/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility\nGoing to this greets us with a 404 Error: ENOENT: no such file or directory, stat '/app/frontend/dist/frontend/assets/private/thank-you.jpg'\nAnd going back to the scoreboard I see the challenge has indeed completed.\nProduct Tampering Category: Broken Access Control\n Change the href of the link within the OWASP SSL Advanced Forensic Tool (O-Saft) product description into https://owasp.slack.com.\n https://exampleapp.herokuapp.com/rest/products/search?q=o-saft we find the id is 9. I intercepted a request to /api/Products/9 in Burp and changed the request from GET to PUT, adding Content-Type: application/json, and finally {\u0026quot;description\u0026quot;: \u0026quot;\u0026lt;a href=\\\u0026quot;https://owasp.slack.com\\\u0026quot; target=\\\u0026quot;_blank\\\u0026quot;\u0026gt;More...\u0026lt;/a\u0026gt;\u0026quot;} to the body.\nPUT /api/products/9 HTTP/1.1 Host: exampleapp.herokuapp.com Cookie: language=en; welcomebanner_status=dismiss; cookieconsent_status=dismiss; continueCode=wkhOtpIEsZUyHRumhYTZFyfySqtBi4fvSPHoMuaDtqni46fokSnxH5VuRYc7vS9KUZesDVig3S6ohOvtvvIx2TMnCPEs9RumbfoK; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6MjEsInVzZXJuYW1lIjoiIiwiZW1haWwiOiJ0ZXN0QHRlc3QuY29tIiwicGFzc3dvcmQiOiIwNWE2NzFjNjZhZWZlYTEyNGNjMDhiNzZlYTZkMzBiYiIsInJvbGUiOiJjdXN0b21lciIsImRlbHV4ZVRva2VuIjoiIiwibGFzdExvZ2luSXAiOiJ1bmRlZmluZWQiLCJwcm9maWxlSW1hZ2UiOiIvYXNzZXRzL3B1YmxpYy9pbWFnZXMvdXBsb2Fkcy9kZWZhdWx0LnN2ZyIsInRvdHBTZWNyZXQiOiIiLCJpc0FjdGl2ZSI6dHJ1ZSwiY3JlYXRlZEF0IjoiMjAyMS0wOS0yOSAyMjo1ODoyNC4xODEgKzAwOjAwIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0yOSAyMzowNDo1NC4yNDcgKzAwOjAwIiwiZGVsZXRlZEF0IjpudWxsfSwiaWF0IjoxNjMyOTYxNTcyLCJleHAiOjE2MzI5Nzk1NzJ9.UEhLYcuCkaSYF0JvRXS64GYNMIxQqE98Wi46VTSXResmOH8w5Bg0pxXmCW0mGmNJPTGKBptbTPG_v-t5GfO4E36TeqiLCbOol_MHN1ZnyPQoqSfPLALIA37iNw6BQZsSa7TyG8ixA6hFNjmcno44lq_qM9p_V2cbUdffHbfwt4A User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Upgrade-Insecure-Requests: 1 If-None-Match: W/\u0026quot;1f7-edRq59DDoY0qO1LQdUtOO3s+ErQ\u0026quot; Cache-Control: max-age=0 Te: trailers Connection: close Content-Type: application/json Content-Length: 84 {\u0026quot;description\u0026quot;: \u0026quot;\u0026lt;a href=\\\u0026quot;https://owasp.slack.com\\\u0026quot; target=\\\u0026quot;_blank\\\u0026quot;\u0026gt;More...\u0026lt;/a\u0026gt;\u0026quot;} Reset Jim\u0026rsquo;s Password Category: Broken Authentication\n Reset Jim\u0026rsquo;s password via the Forgot Password mechanism with the original answer to his security question.\n So the first step is obviously to go over to the login page and select Forgot Password. Inputting the email as jim@juice-sh.op tells us that his secret question is \u0026ldquo;Your eldest siblings middle name?\u0026rdquo;. So I must find out who Jim is, looking around reviews I see one by Jim for the product OWASP Juice Shop-CTF Velcro Patch stating \u0026quot;Looks so much better on my uniform than the boring Starfleet symbol.\u0026quot;\nIf you are like me and Starfleet isn\u0026rsquo;t a quick give away a simple Google search tells me this is related to Star Trek and that this account belongs to James T. Kirk. https://memory-alpha.fandom.com/wiki/James_T._Kirk reveals his only sibling as George Samuel Kirk.\nUse Samuel as the answer to the security question and change the password.\nUpload Size Category: Improper Input Validation\n Upload a file larger than 100 kB.\n For this I headed over to Complaint where we already know there\u0026rsquo;s an option to upload. This accepts only .pdf and .zip files so I zip a file that is below 100kB and capture a legit request via Burp.\nI change the extension back to .pdf and also change application/pdf from zip to pdf as well and delete the contents. Then I right click and choose paste from file and select a pdf file that is over the 100kB limit but still below 200kB and send the request.\nUpload Type Category: Improper Input Validation\n Upload a file that has no .pdf or .zip extension.\n Simply capture the request in Burp and remove the extension from the filename=.\nXXE Data Access Unavailable on the Heroku environment.\n4 * Challenges Access Log Category: Sensitive Data Exposure\n Gain access to any access log file of the server.\n When I was testing out a tool from Github called Sitadel(https://github.com/shenril/Sitadel) I came across the log files. Another easy way is to use the OWASP ZAP DirBuster plugin for this.\nGo to https://exampleapp.herokuapp.com/support/logs and download the access log here to complete the challenge.\nAllowlist Bypass Category: Unvalidated Redirects\n Enforce a redirect to a page you are not supposed to redirect to.\n On the menu list theres an option that redirects to the Juice Shop Github page https://exampleapp.herokuapp.com/redirect?to=https://github.com/bkimminich/juice-shop. To bypass the allowlist and the 406 Error: Unrecognized target URL for redirect error I had to use the original redirect but craft it a bit differently so that it includes where I want to redirect to between the site we are on and the allowed redirect. Like so:\nhttps://exampleapp.herokuapp.com/redirect?to=http://kimminich.de?pwned=https://github.com/bkimminich/juice-shop\nCSP Bypass Unavailable on the Heroku environment.\nChristmas Special Category: Injection\n Order the Christmas special offer of 2014.\n I already know that this is susceptible to SQL Injection but if I didn\u0026rsquo;t the category would have been a give away. So first I use Injection to get a list of all the products https://exampleapp.herokuapp.com/rest/products/search?q=%27))--. I found one Christmas related entry with an id of 10.\nid\t10 name\t\u0026quot;Christmas Super-Surprise-Box (2014 Edition)\u0026quot; description\t\u0026quot;Contains a random selection of 10 bottles (each 500ml) of our tastiest juices and an extra fan shirt for an unbeatable price! (Seasonal special offer! Limited availability!)\u0026quot; price\t29.99 deluxePrice\t29.99 image\t\u0026quot;undefined.jpg\u0026quot; createdAt\t\u0026quot;2021-10-06 12:56:19.525 +00:00\u0026quot; updatedAt\t\u0026quot;2021-10-06 12:56:19.525 +00:00\u0026quot; deletedAt\t\u0026quot;2014-12-27 00:00:00.000 +00:00\u0026quot; Next I added an item to the basket and inspected the basket page. Heading over to the Network tab to make a POST request to /api/BasketItems and added the following lines:\nin the header: Content-Type: application/json in the body: {\u0026quot;BasketId\u0026quot;: \u0026quot;\u0026lt;Your Basket ID\u0026gt;\u0026quot;, \u0026quot;ProductId\u0026quot;: 10, \u0026quot;quantity\u0026quot;: 1}\nReloading the page got a successful 200 code response and the Christmas product was visible in the basket and clicking Checkout completes this challenge.\nEaster Egg Category: Broken Access Control\n Find the hidden easter egg.\n I\u0026rsquo;ve already been across the /ftp directory before in my search of log files and noticed a file there named eastere.gg. Attempting to download this I was met with an error, 403 Error: Only .md and .pdf files are allowed!. So I had to bypass this by tricking it into thinking it was a .md file.\nhttps://exampleapp.herokuapp.com/ftp/eastere.gg%2500.md\nThe attack used: http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection\nEphemeral Accountant Category: Injection\n Log in with the (non-existing) accountant acc0unt4nt@juice-sh.op without ever registering that user.\n Carefully read the hints as it is possible to fail this challenge and have to restart the Juice Shop. Luckily it also reminds us that the category is a give away as to how to do this challenge properly. I had to look up the solution to this challenge as it was a bit above my current knowledge.\n' UNION SELECT * FROM (SELECT 15 as 'id', '' as 'username', 'acc0unt4nt@juice-sh.op' as 'email', '12345' as 'password', 'accounting' as 'role', '123' as 'deluxeToken', '1.2.3.4' as 'lastLoginIp' , '/assets/public/images/uploads/default.svg' as 'profileImage', '' as 'totpSecret', 1 as 'isActive', '1999-08-16 14:14:41.644 +00:00' as 'createdAt', '1999-08-16 14:33:41.930 +00:00' as 'updatedAt', null as 'deletedAt')--\nLogging in with this syntax as the email and anything as the password gets me a temporary JWT Token and establishes the ephemeral user session.\nExpired Coupon Category: Improper Input Validation\n Successfully redeem an expired campaign coupon code.\n For this I went back to the debugger tab to have a look at main-es2015.js and did a search for campaign.\nWMNSDY2019: { validOn: 1551999600000, discount: 75 }, This tells us when the coupon was valid if we convert it to a JavaScript date this tells us that its valid on March 8th 2019. I simply had to set my system to this date timedatectl set-time `2019-03-08`  and submit the code WMNSDY2019 to complete this challenge.\n","date":"September 19, 2021","hero":"/posts/owasp-juice-shop-walkthrough/hero.jpg","permalink":"/posts/owasp-juice-shop-walkthrough/","summary":"Setup For this I visited https://elements.heroku.com/buttons/bkimminich/juice-shop and looked through the many options to get my own personal instance of Juice Shop setup. The first option, Deploy on Heroku for free, caught my eye. For this I simply had to:\n Sign up to Heroku and log in. Click the provided deploy button.  This really is the fastest and simplest way to get setup, and its free!\nAfter I clicked deploy I had to give the app a name and wait for it to build.","tags":null,"title":"OWASP Juice Shop Walkthrough"},{"categories":null,"contents":"Create a Repository Firstly you\u0026rsquo;ll want to create a repository for this on Github to make changes easier to update with git commit and push rather than uploading files manually every time you make changes. As this will be a Github Page you will want to name the repo as \u0026lsquo;.github.io\u0026rsquo;. Yes the .io here is important so make sure you add that.\nClone this repository to your local machine and cd to it, I added mine under the users documents folder.\nCreate the Hugo Site You\u0026rsquo;ll want to get the basic Hugo site next by using the command:\nhugo new site ./ -f=yaml --force The -f=yaml makes your YAML configuration file while the --force command is optional and only forces Hugo to build the site if theres files already in the directory so its unnecessary if you just created the directory.\nPick a Theme This part is the most important and should take you the longest. Before you go having a look around the themes first take the time to think about what you are making this site for and maybe note down what the theme needs to have and what things you\u0026rsquo;d like it to have but aren\u0026rsquo;t as necessary.\nThen head over to https://themes.gohugo.io/ and have a look at the tags on the right side. Chances are you already have in mind the kind of site you want. I was after a Portfolio site so that tag was the obvious choice for me to begin at.\nWhen you\u0026rsquo;ve found the theme you want you will have to click download and this will bring you to the github page for that theme. From there you will need to use the command git submodule add https://the-github-link.git themes/theme-name. I chose Toha for my theme so my command looks like:\ngit submodule add https://github.com/hugo-toha/toha.git themes/toha Run the Site You will want to test that its all working now and be able to see what changes you make appear like on the site locally before you commit those changes publicly on Github. To do this you will need to run the following command:\nhugo server -t toha -w Note that you will have to change toha to whatever theme you chose if you chose a different one. Running this opens up port 1313 by default to host your site locally and can be reached by going to http://localhost:1313.\nConfigure the Site Before you get started on the personal stuff it\u0026rsquo;s time to configure the basics first. Remember that yaml file we had Hugo create at the start? It is config.yaml and it is located in the root directory of your repository. Open it up in your favorite text editor, I personally use Atom for this. You\u0026rsquo;ll want to replace the default content with this:\n#baseURL: https://hugo-toha.github.io languageCode: en-us title: \u0026quot;Crystal Mercier\u0026quot; theme: \u0026quot;toha\u0026quot; # Manage languages # For any more details, you can check the official documentation: https://gohugo.io/content-management/multilingual/ languages: en: languageName: English weight: 1 # Force a locale to be use, really useful to develop the application ! Should be commented in production, the \u0026quot;weight\u0026quot; should rocks. # DefaultContentLanguage: bn # Allow raw html in markdown file markup: goldmark: renderer: unsafe: true tableOfContents: startLevel: 2 endLevel: 6 ordered: false # At least HTML and JSON are required for the main HTML content and # client-side JavaScript search outputs: home: - HTML - RSS - JSON # Enable Google Analytics googleAnalytics: UA-122321624-2 # Enable global emoji support enableEmoji: true # Site parameters params: # Background image of the landing page background: /images/default-background.jpg # Provide logos for your site. The inverted logo will be used in the initial # transparent navbar and the main logo will be used in the non-transparent navbar. logo: main: /images/site/main-logo.png inverted: /images/site/inverted-logo.png # GitHub repo of your site #gitRepo: https://github.com/hugo-toha/hugo-toha.github.io # Default branch of your Git repo #gitBranch: source # Configure various features of this theme features: # Enable and configure portfolio portfolio: enable: true # Enable and configure blog posts blog: enable: true # Enable \u0026amp; configure \u0026quot;Notes\u0026quot; features notes: enable: true # specify whether you want to show Table of Contents in reading page enableTOC: true # If you want to use different country flag for a language, specify them here. # flagOverwrites: # - languageCode: en # countryCode: us # Provide footer configuration. footer: enable: true # You can provide your custom footer template using this option. # Put your template in \u0026quot;layouts/partials\u0026quot; folder of your repo. template: footer.html # Show/hide navigation in the footer. Default is \u0026quot;true\u0026quot;. navigation: enable: true # Show/hide \u0026quot;Contact Me\u0026quot; section in the footer. Default is \u0026quot;true\u0026quot;. contactMe: enable: true # Show/hide credentials section in the footer. Default is \u0026quot;true\u0026quot;. credentials: enable: true # Show/hide newsletter section in the footer. Default is \u0026quot;true\u0026quot;. # Currently, it supports \u0026quot;mailchimp\u0026quot;. newsletter: enable: false provider: mailchimp mailchimpURL: https://github.us1.list-manage.com/subscribe/post?u=19de52a4603135aae97163fd8\u0026amp;amp;id=094a24c76e # Show/hide disclaimer notice in the footer. Default is \u0026quot;false\u0026quot;. disclaimer: enable: false If you used a different theme I suggest Googling configuration examples or complete documentation for that theme instead of just copying this. If you are using Toha theme make sure you change the title: and more configurable options can be found at https://toha-guides.netlify.app/posts/configuration/site-parameters/.\nAdd Data There should be a data folder in the root directory and inside this folder should be another called en for English. If one or both of these are missing then you\u0026rsquo;ll need to create them.\nSite First you\u0026rsquo;ll add site information by creating a file named site.yaml within the /data/en/ directory and add the following content:\n# Copyright Notice copyright: © 2020 Copyright. # Meta description for your site. This will help the search engines to find your site. description: Portfolio and personal blog of Crystal Mercier. Change the description to whatever you want yours to be.\nAuthor Next create an author.yaml file within the /data/en/ directory and add the following in it:\n# some information about you name: \u0026quot;Crystal Mercier\u0026quot; nickname: \u0026quot;Crystal\u0026quot; # greeting message before your name. it will default to \u0026quot;Hi! I am\u0026quot; if not provided greeting: \u0026quot;Hi, My name is\u0026quot; image: \u0026quot;images/author/crystal.png\u0026quot; # give your some contact information. they will be used in the footer contactInfo: email: \u0026quot;cmmercier86@gmail.com\u0026quot; # phone: \u0026quot;+0123456789\u0026quot; # some summary about what you do summary: - I am a Bug Bounty Hunter - I am a Security Researcher Again take some time to go over this and change the information to your own before saving.\nSections Now that the basics are set you will need to add a new directory named sections in /data/en and move into this new directory to add some more files.\nAbout Create a file named about.yaml and copy the following inside it:\n# section information section: name: About id: about enable: true weight: 1 showOnNavbar: true template: sections/about.html # your designation designation: Security Researcher # your company information #company: # name: Example Co. # url: \u0026quot;https://www.example.com\u0026quot; # your resume. this file path should be relative to you \u0026quot;static\u0026quot; directory resume: \u0026quot;files/resume.pdf\u0026quot; # a summary about you summary: 'I am a passionate about technology and fitness. I enjoy constantly learning new things and helping out others. This blog is to share helpful bits of information about various topics in IT and also topics that happen to interest me at the time. Hopefully as a visitor to the site you’ll find the blog posts here useful.' # your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Email icon: \u0026quot;fas fa-envelope\u0026quot; url: \u0026quot;cmmercier86@gmail.com\u0026quot; - name: Github icon: \u0026quot;fab fa-github\u0026quot; url: \u0026quot;https://www.github.com/Cyb3rWulfengrav\u0026quot; - name: LinkedIn icon: \u0026quot;fab fa-linkedin\u0026quot; url: \u0026quot;https://www.linkedin.com/in/crystalmercier/\u0026quot; - name: Twitter icon: \u0026quot;fab fa-twitter\u0026quot; url: \u0026quot;https://twitter.com/CM3rc13r\u0026quot; # your soft skills # give the percentage between 50 to 100 with 5 intervals. # currently supported colors: blue, yellow, pink, green, sky, orange badges: - type: certification name: CompTIA Security+ url: \u0026quot;https://www.credly.com/org/comptia/badge/comptia-security-ce-certification\u0026quot; badge: \u0026quot;https://images.credly.com/size/340x340/images/74790a75-8451-400a-8536-92d792c5184a/CompTIA_Security_2Bce.png\u0026quot; - type: soft-skill-indicator name: Critical Thinking percentage: 100 color: yellow - type: soft-skill-indicator name: Communication percentage: 100 color: pink - type: soft-skill-indicator name: Problem Solving percentage: 100 color: orange - type: soft-skill-indicator name: Adaptability percentage: 100 color: green - type: soft-skill-indicator name: Team Work percentage: 100 color: sky Again change the information before saving and exiting this file. Also the resume.pdf should be supplied in the /static/files directory of your repository.\nSkills Next create the skills.yaml and copy the following:\n# section information section: name: Skills id: skills enable: true weight: 2 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # Your Skills. # Give a summary of you each skill in the summary section. skills: - name: Linux logo: \u0026quot;/images/sections/skills/linux.png\u0026quot; summary: \u0026quot;Kali and Ubuntu in Virtual Environments, Basic Bash Commands, File System Hierarchy, User Account Management, Network Firewalls.\u0026quot; - name: Windows logo: \u0026quot;/images/sections/skills/windows.png\u0026quot; summary: \u0026quot;Hardware, Active Directory, Powershell, Supporting and Troubleshooting, Backup and Restore, Security and Networking.\u0026quot; - name: Risk Analysis logo: \u0026quot;/images/sections/skills/riskanalysis.png\u0026quot; summary: \u0026quot;Identifying network vulnerabilities and risks. Configuring Networks in a secure manner to protect against breaches, malware and insider threats.\u0026quot; - name: Security Assessment Tools logo: \u0026quot;/images/sections/skills/tools.png\u0026quot; summary: \u0026quot;Kali Linux, Nmap, Burp Suite, OWASP ZAP Proxy, SQLMap, Wireshark, Nessus, John the Ripper, Hydra..etc\u0026quot; - name: Web Technologies logo: \u0026quot;/images/sections/skills/web.png\u0026quot; summary: \u0026quot;HTTP protocol, HTTP status codes and headers, the basics of network security, basic understanding of web programming languages.\u0026quot; - name: Web Hacking logo: \u0026quot;/images/sections/skills/webcode.png\u0026quot; summary: \u0026quot;Knowledgeable in web application security vulnerabilities like XSS, CSRF, and RCE.\u0026quot; Change what you need to and save before closing.\nExperiences Next create experiences.yaml and add the following:\n# section information section: name: Experiences id: experiences enable: false weight: 3 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # Your experiences experiences: - company: name: Example Co. url: \u0026quot;https://www.example.com\u0026quot; location: Dhaka Branch # company overview overview: Example Co. is a widely recognized company for cloud-native development. It builds tools for Kubernetes. positions: - designation: Senior Software Engineer start: Nov 2019 # don't provide end date if you are currently working there. It will be replaced by \u0026quot;Present\u0026quot; # end: Dec 2020 # give some points about what was your responsibilities at the company. responsibilities: - Design and develop XYZ tool for ABC task - Design, develop and manage disaster recovery tool [Xtool](https://www.example.com) that backup Kubernetes volumes, databases, and cluster's resource definition. - Lead backend team. - company: name: PreExample Co. url: \u0026quot;https://www.preexample.com\u0026quot; location: Nowhere overview: PreExample Co. is a gateway company to enter into Example co. So, nothing special here. positions: - designation: Software Engineer start: March 2016 end: May 2017 responsibilities: - Write lots of example codes. - Read lots of examples. - See lots of example videos. Again Change what you need to and save before closing.\nProjects Create projects.yaml and add the following to it:\n# section information section: name: Projects id: projects enable: true weight: 6 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # filter buttons #buttons: #- name: All # filter: \u0026quot;all\u0026quot; #- name: Professional # filter: \u0026quot;professional\u0026quot; #- name: Academic # filter: \u0026quot;academic\u0026quot; #- name: Hobby # filter: \u0026quot;hobby\u0026quot; # your projects projects: - name: TryHackMe Write-Ups logo: /images/sections/projects/tryhackme.png role: Owner timeline: \u0026quot;July 2021 - Present\u0026quot; repo: https://github.com/Cyb3rWulfengrav/THM_Write-Ups #url: \u0026quot;\u0026quot; # If your project is not a public repo but it has a website or any external details url then provide it here. don't provide \u0026quot;repo\u0026quot; and \u0026quot;url\u0026quot; simultaneously. summary: Write-ups for various hacktivities on tryhackme.com. tags: [\u0026quot;Write-up\u0026quot;, \u0026quot;TryHackMe\u0026quot;, \u0026quot;Hacktivities\u0026quot;] - name: HackTheBox logo: /images/sections/projects/hackthebox.png role: Owner timeline: \u0026quot;July 2021 - Present\u0026quot; repo: https://github.com/Cyb3rWulfengrav/HTB_Write-Ups #url: \u0026quot;\u0026quot; summary: My collection of write-ups for the site hackthebox.eu. tags: [\u0026quot;Write-up\u0026quot;, \u0026quot;HackTheBox\u0026quot;,\u0026quot;Hacktivities\u0026quot;] #- name: Toha # logo: /images/sections/projects/toha.png # role: Owner # timeline: \u0026quot;Jun 2019 - Present\u0026quot; # repo: https://github.com/hossainemruz/toha # summary: A Hugo theme for personal portfolio. # tags: [\u0026quot;hobby\u0026quot;,\u0026quot;hugo\u0026quot;,\u0026quot;theme\u0026quot;,\u0026quot;professional\u0026quot;] Change what you need to and save before closing.\nRecent Posts Create the recent-posts.yaml file and add the following:\n# section information section: name: Recent Posts id: recent-posts enable: true weight: 7 showOnNavbar: true The only things you might want to change here are the weight (decides what order it appears in relation to the other sections) and whether you want it on the Navbar or not.\nAchievements Create achievements.yaml file and add the following:\n# section information section: name: Achievements id: achievements enable: false weight: 6 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # Your achievements achievements achievements: - title: Best Presenter image: /images/sections/achievements/presenter.jpg summary: Best presenter in the 2020 XYZ conference. - title: Champion image: /images/sections/achievements/sport.jpg summary: Champion in cycling inter-city cycling championship 2020. - title: Graduation image: /images/sections/achievements/graduation-cap.jpg summary: Received Bachelor of Science (B.Sc.) in Computer Science and Engineer from XYZ University. - title: Award Winner image: /images/sections/achievements/woman-winner.jpg summary: Wined best paper award at IEE Conference 2020. Set enable to true and change the information if you wish to use this section.\nDeploy site In the root directory run the command hugo, this builds the site and adds the contents to the folder public. Move into this folder and use the following commands:\ngit init git add . git remote add origin https://github.com/username/username.github.io.git git commit -m \u0026quot;first commit\u0026quot; git push origin master The git push step will ask for your username and password. Note that Github passwords do not seem to work for this anymore and the password is really asking for your Github personal access token. If you do not have a Github personal access token set you must do that now. When this successfully completes your new site will be up and running at https://\u0026lt;your username\u0026gt;.github.io.\nPersonal Access Token Open Github and go to settings on the menu that appears when you click your icon. From there click on Developer settings and the Personal access token section. Click Generate new token and give it a descriptive name and expiration date then give it the permissions you require and click Generate token.\nUse this token as the password and your push request will complete.\nAdd Posts To start adding new posts to your site you have to go to themes/toha/content and posts, if posts directory does not exist already you must create it then cd posts. Now create a file named _index.md within themes/toha/content/posts and add the following:\n--- title: Posts --- Next create a directory for your first post and cd into this new directory. Now create a file named index.md, this is a Markdown file and follows the Markdown syntax. Here is a quick cheat sheet for reference https://www.markdownguide.org/cheat-sheet/. Enter the following to the index.md file to get started:\n--- title: \u0026quot;How to build your own Hugo Website and host it for free on Github Pages\u0026quot; date: 2021-09-12 description: \u0026quot;I walk through the steps required to get a website up and running fast and easy using Hugo and Github Pages\u0026quot; menu: sidebar: name: Build your own Hugo website identifier: Build your own Hugo website weight: 1 --- Change the information to match your own post and begin writing your post below those --- lines. Happy posting!\nNotes To configure sections: data/en/\nImage file location: themes/toha/static/images\nTheme images location: themes/toha/assets/images\nPosts location: themes/toha/content/posts\n","date":"September 12, 2021","hero":"/posts/website-guide/hero.png","permalink":"/posts/website-guide/","summary":"Create a Repository Firstly you\u0026rsquo;ll want to create a repository for this on Github to make changes easier to update with git commit and push rather than uploading files manually every time you make changes. As this will be a Github Page you will want to name the repo as \u0026lsquo;.github.io\u0026rsquo;. Yes the .io here is important so make sure you add that.\nClone this repository to your local machine and cd to it, I added mine under the users documents folder.","tags":null,"title":"How to build your own Hugo Website and host it for free on Github Pages"}]